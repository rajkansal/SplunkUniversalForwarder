




const fs = require('fs');
const forge = require('node-forge');
const path = require('path');

// Read the PEM file
const pemFilePath = 'C:\\Program Files\\SplunkUniversalForwarder\\etc\\auth\\server.pem'; // Update this path
const pem = fs.readFileSync(pemFilePath, 'utf8');

// Convert PEM to a certificate object
const cert = forge.pki.certificateFromAsn1(forge.asn1.fromDer(forge.pem.decode(pem)[0].body));

// Extract fields
const validFrom = cert.validity.notBefore; // Date object
const validTo = cert.validity.notAfter; // Date object

// Function to format the date
const formatDate = (date) => {
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;
};

// Get validFrom and validTo timestamps in milliseconds
const validFromTimestamp = validFrom.getTime(); // Milliseconds
const validToTimestamp = validTo.getTime(); // Milliseconds

// Create JSON object
const certificateJson = {
    name: "custom_metrics_integration",
    subject: cert.subject.attributes.reduce((obj, attr) => {
        obj[attr.shortName] = attr.value;
        return obj;
    }, {}),
    issuer: cert.issuer.attributes.reduce((obj, attr) => {
        obj[attr.shortName] = attr.value;
        return obj;
    }, {}),
    validFrom: formatDate(validFrom), // Format the date
    validTo: formatDate(validTo), // Format the date
    validFromTimestamp: validFromTimestamp, // Milliseconds timestamp for validFrom
    validToTimestamp: validToTimestamp, // Milliseconds timestamp for validTo
    publicKey: forge.pki.publicKeyToPem(cert.publicKey)
};

// Define the output path
const outputFilePath = path.join(__dirname, 'certificate.json');

// Write the JSON to a file
fs.writeFileSync(outputFilePath, JSON.stringify(certificateJson, null, 2));

console.log(`JSON file created at: ${outputFilePath}`);







